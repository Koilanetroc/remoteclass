<link rel="stylesheet" href="/videojs/video-js.css">
<link rel="stylesheet" href="/css/view.css">
<script src="/videojs/video.js"></script>

<div class="ui active inverted dimmer dimmer--not-transparent" id="dimmer-loading">
  <div class="ui text big loader">Ожидание подключения к трансляции...</div>
</div>

<div class="ui active inverted dimmer dimmer--not-transparent" id="dimmer-ws-connect">
  <div class="ui text big loader">Соединение</div>
</div>

<a class="ui black icon button" id="leave-button" href="/">
  <i class="close icon"></i>
</a>

<a class="ui black icon button display-none" id="draw-button">
  <i class="pencil icon"></i>
</a>

<div class="ui active inverted dimmer dimmer--not-transparent display-none" id="dimmer-play">
  <h2>Трансляция подключена</h2>
  <a class="ui blue massive button" id="play-button">
    Смотреть
  </a>
</div>

<div class="ui active inverted dimmer dimmer--not-transparent display-none" id="dimmer-ended">
  <h2>Трансляция окончена</h2>
  <a class="ui blue massive button" href="/">
    Вернуться назад
  </a>
</div>

<div class="ui active inverted dimmer dimmer--not-transparent display-none" id="dimmer-error">
  <h2>При просмотре возникла проблема</h2>
  <a class="ui blue massive button" href="?retry=1">
    Попробовать еще раз
  </a>
  <a class="ui massive button" href="/">
    Вернуться назад
  </a>
</div>

<div id="drawing-board" class="display-none">
  <div id="draw-toolbar">
    <button class="ui circular black large icon button" id="brush-plus">
      <i class="icon plus"></i>
    </button>
    <button class="ui circular black large icon button" id="brush-minus">
      <i class="icon minus"></i>
    </button>
    <button class="ui circular red large icon button" id="color-red">
      <i class="icon paint brush"></i>
    </button>
    <button class="ui circular blue large icon button" id="color-blue">
      <i class="icon paint brush"></i>
    </button>
    <button class="ui circular green large icon button" id="color-green">
      <i class="icon paint brush"></i>
    </button>
    <button class="ui circular black large icon button" id="color-black">
      <i class="icon paint brush"></i>
    </button>
    <button class="ui circular large icon button" id="color-white">
      <i class="icon eraser"></i>
    </button>
  </div>
  <canvas>Browser is too old for touch capabilities</canvas>
</div>

<video id="player" class="video-js video-player" controls autoplay preload="auto">
  <p class="vjs-no-js">
    To view this video please enable JavaScript, and consider upgrading to a web browser that
    <a href="https://videojs.com/html5-video-support/" target="_blank">supports HTML5 video</a>
  </p>
</video>

<style>
  html, body {
    position: fixed;
  }
</style>

<script>
  function debounce (callback, wait) {
    let timeout;
    return (...args) => {
      const context = this;
      clearTimeout(timeout);
      timeout = setTimeout(() => callback.apply(context, args), wait);
    };
  }

  function initDrawing (onChange) {
    var canvas = document.querySelector('#drawing-board > canvas')
    var context = canvas.getContext('2d')

    var strokeColor = "#1b1c1d"

    var brushCoeff = 1.0

    $("#brush-plus").click(function () {
      brushCoeff += 0.1
    })

    $("#brush-minus").click(function () {
      brushCoeff -= 0.1

      if (brushCoeff < 0.3) brushCoeff = 0.3
    })

    $("#color-red").click(function () {
      strokeColor = "#db2828"
    })

    $("#color-blue").click(function () {
      strokeColor = "#2185d0"
    })

    $("#color-green").click(function () {
      strokeColor = "#21ba45"
    })

    $("#color-black").click(function () {
      strokeColor = "#1b1c1d"
    })

    $("#color-white").click(function () {
      strokeColor = "#ffffff"
    })

    var debouncedOnChange = debounce(() => onChange(canvas), 1000)

    var lineWidth = 0
    var isMousedown = false
    var points = []
    canvas.width = window.innerWidth * 2
    canvas.height = window.innerHeight * 2

    console.log(context.fillStyle);

    context.fillStyle = "white";
    context.fillRect(0, 0, canvas.width, canvas.height);

    // Send first white screen
    debouncedOnChange()

    // Force push each 10 seconds
    setInterval(debouncedOnChange, 10000)

    var getStrokeColor = function () {
      return strokeColor
    }

    ;['touchstart', 'mousedown'].forEach(function (ev) {
      canvas.addEventListener(ev, function (e) {
        var pressure = 0.1
        var x, y
        if (e.touches && e.touches[0] && typeof e.touches[0]["force"] !== "undefined") {
          if (e.touches[0]["force"] > 0) {
            pressure = e.touches[0]["force"]
          }
          x = e.touches[0].pageX * 2
          y = e.touches[0].pageY * 2
        } else {
          pressure = 1.0
          x = e.pageX * 2
          y = e.pageY * 2
        }
        isMousedown = true
        // lineWidth = (pressure * 50 * 0.8 + lineWidth * 0.2)
        context.lineWidth = lineWidth * brushCoeff// pressure * 50;
        context.strokeStyle = getStrokeColor()
        context.lineCap = 'round'
        context.lineJoin = 'round'
        context.beginPath()
        context.moveTo(x, y)
        points.push({
          x, y, lineWidth
        })
      })
    })
    ;['touchmove', 'mousemove'].forEach(function (ev) {
      canvas.addEventListener(ev, function (e) {
        if (!isMousedown) return
        var pressure = 0.1
        var x, y
        if (e.touches && e.touches[0] && typeof e.touches[0]["force"] !== "undefined") {
          if (e.touches[0]["force"] > 0) {
            pressure = e.touches[0]["force"]
          }
          x = e.touches[0].pageX * 2
          y = e.touches[0].pageY * 2
        } else {
          pressure = 1.0
          x = e.pageX * 2
          y = e.pageY * 2
        }
        lineWidth = (Math.log(pressure + 1) * 40 * 0.4 + lineWidth * 0.6) * brushCoeff
        points.push({
          x, y, lineWidth
        })
        context.strokeStyle = getStrokeColor()
        context.lineCap = 'round'
        context.lineJoin = 'round'
        // context.lineWidth   = lineWidth// pressure * 50;
        // context.lineTo(x, y);
        // context.moveTo(x, y);
        if (points.length >= 3) {
          var l = points.length - 1
          var xc = (points[l].x + points[l - 1].x) / 2
          var yc = (points[l].y + points[l - 1].y) / 2
          context.lineWidth = points[l - 1].lineWidth
          context.quadraticCurveTo(points[l - 1].x, points[l - 1].y, xc, yc)
          context.stroke()
          context.beginPath()
          context.moveTo(xc, yc)
        }
        // $force.innerHTML = 'force = ' + pressure
        // $touches.innerHTML = 'touchev = ' + (e.touches ? JSON.stringify(e.touches[0]) : '')
        e.preventDefault()
      })
    })
    ;['touchend', 'touchleave', 'mouseup'].forEach(function (ev) {
      canvas.addEventListener(ev, function (e) {
        var pressure = 0.1
        var x, y
        if (e.touches && e.touches[0] && typeof e.touches[0]["force"] !== "undefined") {
          if (e.touches[0]["force"] > 0) {
            pressure = e.touches[0]["force"]
          }
          x = e.touches[0].pageX * 2
          y = e.touches[0].pageY * 2
        } else {
          pressure = 1.0
          x = e.pageX * 2
          y = e.pageY * 2
        }
        isMousedown = false
        context.strokeStyle = getStrokeColor()
        context.lineCap = 'round'
        context.lineJoin = 'round'
        if (points.length >= 3) {
          var l = points.length - 1
          context.quadraticCurveTo(points[l].x, points[l].y, x, y)
          context.stroke()
        }
        points = []
        lineWidth = 0

        debouncedOnChange()
      })
    })
  }

  $(document).ready(function () {
    var streamLoaded = false;
    var played = false;
    var player = videojs('player');

    var setSrc = function () {
      let stream = "http://" + location.hostname + ":8085/hls/live.m3u8?cache=" + Math.random();

      player.src({
        src: stream,
        type: 'application/x-mpegURL',
        overrideNative: true
      });

      player.load();
    }

    setInterval(function () {
      console.log("rs", player.readyState())
    }, 1000)

    setSrc()

    player.reloadSourceOnError()

    player.on("playing", function () {
      player.liveTracker.seekToLiveEdge();

      played = true;
    });

    player.on("durationchange", function () {
      console.log("Can play!")

      streamLoaded = true;

      document.querySelector("#dimmer-loading").classList.add("display-none");

      document.querySelector("#dimmer-play").classList.remove("display-none");
    });

    player.on("ended", function () {
      console.log("Ended!")
    });

    player.on("error", function (e) {
      if (this.error().code === 4) {
        setTimeout(function () {
          if (played) {
            document.querySelector("#dimmer-error").classList.remove("display-none");

            return
          }

          console.log("Retrying")
          setSrc()
        }, 2000)
      }
    });

    // player.tech().hls.on('hls-unknown-waiting', function() {
    //   console.log('hls-unknown-waiting');
    // });
    // player.tech().hls.on('hls-live-resync', function() {
    //   console.log('hls-live-resync');
    // });
    // player.on('hls-error-reload-initialized', function() {
    //   console.log('hls-error-reload-initialized');
    // });
    // player.on('hls-error-reload', function() {
    //   console.log('hls-error-reload');
    // });

    $("#play-button").click(function () {
      document.querySelector("#dimmer-play").classList.add("display-none");

      player.play();
    })

    player.on("error", function (e) {
      if (this.error().code === 4) {
        setTimeout(function () {
          console.log("Retrying")
          setSrc()
        }, 3500)
      }
    });

    var App = {};
    App.cable = ActionCable.createConsumer(`ws://${window.location.hostname}:3000/cable`);

    let user_name = window.location.search.substr(1).split('=')[1];

    // trying to connect as a teacher
    const teacherChannel = App.cable.subscriptions.create({channel: 'TeacherChannel', name: user_name}, {
      received: function(data) {
        console.log(data);
      },
      connected: function () {
        console.log("connected as a teacher")
        this.perform('send_message_to_pupils', { message: 'Your teacher have just connected!' });
      },
      sendMessage: function(messageBody) {
        console.log('wtf is this');
      }
    })

    // trying to connect as a pupil
    App.messaging = App.cable.subscriptions.create({channel: 'PupilChannel', name: user_name}, {
      received: function(data) {
        if (data.event === "broadcast-end") {
          setTimeout(function () {
            document.querySelector("#dimmer-ended").classList.remove("display-none");
          }, 10000)
        }
      },
      connected: function () {
        console.log("connected as a pupil");

        document.querySelector("#dimmer-ws-connect").classList.add("display-none");

        document.querySelector("#draw-button").classList.remove("display-none");

        $("#draw-button").click(function () {
          document.querySelector("#drawing-board").classList.toggle("display-none");
        })

        initDrawing((canvas) => {
          this.perform("push_image_data", {
            width: canvas.width,
            height: canvas.height,
            image: canvas.toDataURL()
          });
        });
      },
      sendMessage: function(messageBody) {

      }
    })
  })
</script>
